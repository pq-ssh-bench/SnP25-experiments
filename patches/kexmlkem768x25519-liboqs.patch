diff --git a/kexmlkem768x25519.c b/kexmlkem768x25519.c
index 679446e97..498f4cfb6 100644
--- a/kexmlkem768x25519.c
+++ b/kexmlkem768x25519.c
@@ -44,27 +44,25 @@
 
 #ifdef USE_MLKEM768X25519
 
-#include "libcrux_mlkem768_sha3.h"
+// #include "libcrux_mlkem768_sha3.h"
+
+#define OQS_ENABLE_KEM_ml_kem_768 1
+#include "liboqs/include/oqs/kem_ml_kem.h"
 
 int
 kex_kem_mlkem768x25519_keypair(struct kex *kex)
 {
 	struct sshbuf *buf = NULL;
-	u_char rnd[LIBCRUX_ML_KEM_KEY_PAIR_PRNG_LEN], *cp = NULL;
+	u_char *cp = NULL;
 	size_t need;
 	int r = SSH_ERR_INTERNAL_ERROR;
-	struct libcrux_mlkem768_keypair keypair;
 
 	if ((buf = sshbuf_new()) == NULL)
 		return SSH_ERR_ALLOC_FAIL;
 	need = crypto_kem_mlkem768_PUBLICKEYBYTES + CURVE25519_SIZE;
 	if ((r = sshbuf_reserve(buf, need, &cp)) != 0)
 		goto out;
-	arc4random_buf(rnd, sizeof(rnd));
-	keypair = libcrux_ml_kem_mlkem768_portable_generate_key_pair(rnd);
-	memcpy(cp, keypair.pk.value, crypto_kem_mlkem768_PUBLICKEYBYTES);
-	memcpy(kex->mlkem768_client_key, keypair.sk.value,
-	    sizeof(kex->mlkem768_client_key));
+	OQS_KEM_ml_kem_768_keypair(cp, kex->mlkem768_client_key);
 #ifdef DEBUG_KEXECDH
 	dump_digest("client public key mlkem768:", cp,
 	    crypto_kem_mlkem768_PUBLICKEYBYTES);
@@ -74,13 +72,10 @@ kex_kem_mlkem768x25519_keypair(struct kex *kex)
 #ifdef DEBUG_KEXECDH
 	dump_digest("client public key c25519:", cp, CURVE25519_SIZE);
 #endif
-	/* success */
 	r = 0;
 	kex->client_pub = buf;
 	buf = NULL;
  out:
-	explicit_bzero(&keypair, sizeof(keypair));
-	explicit_bzero(rnd, sizeof(rnd));
 	sshbuf_free(buf);
 	return r;
 }
@@ -93,17 +88,14 @@ kex_kem_mlkem768x25519_enc(struct kex *kex,
 	struct sshbuf *server_blob = NULL;
 	struct sshbuf *buf = NULL;
 	const u_char *client_pub;
-	u_char rnd[LIBCRUX_ML_KEM_ENC_PRNG_LEN];
-	u_char server_pub[CURVE25519_SIZE], server_key[CURVE25519_SIZE];
+	uint8_t *kem_key, *ciphertext, *server_pub;
+	u_char server_key[CURVE25519_SIZE];
 	u_char hash[SSH_DIGEST_MAX_LENGTH];
 	size_t need;
 	int r = SSH_ERR_INTERNAL_ERROR;
-	struct libcrux_mlkem768_enc_result enc;
-	struct libcrux_mlkem768_pk mlkem_pub;
 
 	*server_blobp = NULL;
 	*shared_secretp = NULL;
-	memset(&mlkem_pub, 0, sizeof(mlkem_pub));
 
 	/* client_blob contains both KEM and ECDH client pubkeys */
 	need = crypto_kem_mlkem768_PUBLICKEYBYTES + CURVE25519_SIZE;
@@ -119,33 +111,28 @@ kex_kem_mlkem768x25519_enc(struct kex *kex,
 	    client_pub + crypto_kem_mlkem768_PUBLICKEYBYTES,
 	    CURVE25519_SIZE);
 #endif
-	/* check public key validity */
-	memcpy(mlkem_pub.value, client_pub, crypto_kem_mlkem768_PUBLICKEYBYTES);
-	if (!libcrux_ml_kem_mlkem768_portable_validate_public_key(&mlkem_pub)) {
-		r = SSH_ERR_SIGNATURE_INVALID;
-		goto out;
-	}
-
 	/* allocate buffer for concatenation of KEM key and ECDH shared key */
 	/* the buffer will be hashed and the result is the shared secret */
 	if ((buf = sshbuf_new()) == NULL) {
 		r = SSH_ERR_ALLOC_FAIL;
 		goto out;
 	}
+	if ((r = sshbuf_reserve(buf, crypto_kem_mlkem768_BYTES,
+	    &kem_key)) != 0)
+		goto out;
 	/* allocate space for encrypted KEM key and ECDH pub key */
 	if ((server_blob = sshbuf_new()) == NULL) {
 		r = SSH_ERR_ALLOC_FAIL;
 		goto out;
 	}
+	need = crypto_kem_mlkem768_CIPHERTEXTBYTES + CURVE25519_SIZE;
+	if ((r = sshbuf_reserve(server_blob, need, &ciphertext)) != 0)
+		goto out;
 	/* generate and encrypt KEM key with client key */
-	arc4random_buf(rnd, sizeof(rnd));
-	enc = libcrux_ml_kem_mlkem768_portable_encapsulate(&mlkem_pub, rnd);
+	OQS_KEM_ml_kem_768_encaps(ciphertext, kem_key, client_pub);
 	/* generate ECDH key pair, store server pubkey after ciphertext */
+	server_pub = ciphertext + crypto_kem_mlkem768_CIPHERTEXTBYTES;
 	kexc25519_keygen(server_key, server_pub);
-	if ((r = sshbuf_put(buf, enc.snd, sizeof(enc.snd))) != 0 ||
-	    (r = sshbuf_put(server_blob, enc.fst.value, sizeof(enc.fst.value))) != 0 ||
-	    (r = sshbuf_put(server_blob, server_pub, sizeof(server_pub))) != 0)
-		goto out;
 	/* append ECDH shared key */
 	client_pub += crypto_kem_mlkem768_PUBLICKEYBYTES;
 	if ((r = kexc25519_shared_key_ext(server_key, client_pub, buf, 1)) < 0)
@@ -168,7 +155,6 @@ kex_kem_mlkem768x25519_enc(struct kex *kex,
 #ifdef DEBUG_KEXECDH
 	dump_digest("encoded shared secret:", sshbuf_ptr(buf), sshbuf_len(buf));
 #endif
-	/* success */
 	r = 0;
 	*server_blobp = server_blob;
 	*shared_secretp = buf;
@@ -177,8 +163,6 @@ kex_kem_mlkem768x25519_enc(struct kex *kex,
  out:
 	explicit_bzero(hash, sizeof(hash));
 	explicit_bzero(server_key, sizeof(server_key));
-	explicit_bzero(rnd, sizeof(rnd));
-	explicit_bzero(&enc, sizeof(enc));
 	sshbuf_free(server_blob);
 	sshbuf_free(buf);
 	return r;
@@ -189,17 +173,14 @@ kex_kem_mlkem768x25519_dec(struct kex *kex,
     const struct sshbuf *server_blob, struct sshbuf **shared_secretp)
 {
 	struct sshbuf *buf = NULL;
-	u_char mlkem_key[crypto_kem_mlkem768_BYTES];
-	const u_char *ciphertext, *server_pub;
+	uint8_t *kem_key = NULL;
+	const u_char *server_pub;
+	const uint8_t *ciphertext;
 	u_char hash[SSH_DIGEST_MAX_LENGTH];
 	size_t need;
-	int r;
-	struct libcrux_mlkem768_sk mlkem_priv;
-	struct libcrux_mlkem768_ciphertext mlkem_ciphertext;
+	int r, decoded;
 
 	*shared_secretp = NULL;
-	memset(&mlkem_priv, 0, sizeof(mlkem_priv));
-	memset(&mlkem_ciphertext, 0, sizeof(mlkem_ciphertext));
 
 	need = crypto_kem_mlkem768_CIPHERTEXTBYTES + CURVE25519_SIZE;
 	if (sshbuf_len(server_blob) != need) {
@@ -213,19 +194,11 @@ kex_kem_mlkem768x25519_dec(struct kex *kex,
 		r = SSH_ERR_ALLOC_FAIL;
 		goto out;
 	}
-	memcpy(mlkem_priv.value, kex->mlkem768_client_key,
-	    sizeof(kex->mlkem768_client_key));
-	memcpy(mlkem_ciphertext.value, ciphertext,
-	    sizeof(mlkem_ciphertext.value));
-#ifdef DEBUG_KEXECDH
-	dump_digest("server cipher text:", mlkem_ciphertext.value,
-	    sizeof(mlkem_ciphertext.value));
-	dump_digest("server public key c25519:", server_pub, CURVE25519_SIZE);
-#endif
-	libcrux_ml_kem_mlkem768_portable_decapsulate(&mlkem_priv,
-	    &mlkem_ciphertext, mlkem_key);
-	if ((r = sshbuf_put(buf, mlkem_key, sizeof(mlkem_key))) != 0)
+	if ((r = sshbuf_reserve(buf, crypto_kem_mlkem768_BYTES,
+	    &kem_key)) != 0)
 		goto out;
+	decoded = OQS_KEM_ml_kem_768_decaps(kem_key, ciphertext,
+	    kex->mlkem768_client_key);
 	if ((r = kexc25519_shared_key_ext(kex->c25519_client_key, server_pub,
 	    buf, 1)) < 0)
 		goto out;
@@ -244,15 +217,14 @@ kex_kem_mlkem768x25519_dec(struct kex *kex,
 #ifdef DEBUG_KEXECDH
 	dump_digest("encoded shared secret:", sshbuf_ptr(buf), sshbuf_len(buf));
 #endif
-	/* success */
-	r = 0;
+	if (decoded != 0) {
+		r = SSH_ERR_SIGNATURE_INVALID;
+		goto out;
+	}
 	*shared_secretp = buf;
 	buf = NULL;
  out:
 	explicit_bzero(hash, sizeof(hash));
-	explicit_bzero(&mlkem_priv, sizeof(mlkem_priv));
-	explicit_bzero(&mlkem_ciphertext, sizeof(mlkem_ciphertext));
-	explicit_bzero(mlkem_key, sizeof(mlkem_key));
 	sshbuf_free(buf);
 	return r;
 }
